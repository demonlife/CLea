* 数学常数e的含义
  http://www.ruanyifeng.com/blog/2011/07/mathematical_constant_e.html
* 浮点数的二进制表示
  http://www.ruanyifeng.com/blog/2010/06/ieee_floating-point_representation.html
* 4G与3G的区别
  http://jianshu.io/p/845472a0293e
* 斐波那契数列与求最大公约数之间的关系
  如果Euclid算法需要k步来计算两个数的GCD，那么这两个数之中较小的一个必然大于等于Fibonacci数列的第k项
* C 方面的工具
** indent
   一个可以格式化C代码的工具
   indent -kr -i8 test.c //使用K&R风格格式化代码，并且一个tab键是8个空格
* 正则表达式
  http://blog.jobbole.com/71228/
** 正则的分组
   组号的分配过程是要从左向右扫描两遍的，第一遍只给未命名的组分配，
   第二遍只给明了名的组分配，因此所有命名组的组号都大于未命名的组号
   注意： 经过测试发现，python中的正则表达式的组编号命名不是这样的，
   是按照先后顺序来编号的。
** 常见的分组方法
   捕获：
   (exp), 匹配exp， 并捕获文本到自动命名的组里
   (?<name>exp), 匹配exp， 并捕获文本到名称位name的组里，也可以写成(?'name'exp)
   (?:exp),匹配exp，不捕获匹配文本，也不给分组分配组号
   断言：
   (?=exp), 匹配exp前面位置， 但是不匹配exp，例如：
   \b\w+(?=ing\b):匹配一个ing结尾的单词，但是不包含ing，如doing匹配结果为do

   (?<exp), 匹配exp后面位置，但是不匹配exp,也叫0宽度正回顾断言，例如：
   (?<do)\d{3}匹配：do123,但是不匹配doing123
   
   (?!exp), 匹配后面的不是exp的位置，但是不匹配exp, 也叫零度负预测先行断言
   例如：\d{3}(?!123):匹配的结果是， 匹配的三个数字后面跟的不是123
   
   (?<!exp), 匹配前面不是exp的位置，但是不匹配exp
   零宽度负回顾断言，断言此位置前面跟的不是exp的位置
   
   注释：
   (?#comment), 注释
** 平衡组
   (?'name')将捕获的内容命名为group，并压入堆栈
   (?'-group'):从堆栈上弹出最后压入堆栈名为group的捕获内容，如果堆栈为空，则本组匹配失败
   (?(group)yes|no):如果堆栈上存在名为group的捕获内容的话，继续匹配yes部分的表达式，否则匹配no部分的
   (?!)零宽度负先行断言，由于没有后缀表达式，试图匹配总是失败
   
** 内存溢出原理分析
   http://qing.blog.sina.com.cn/1745498822/680a32c633002y78.html
   OOM全称是Out Of Memory，指的是kernel因分配不出内存而报的错误，同时会触发kernel调用OOM killer杀进程来解除这种状况。

* 字符编码
  http://blog.segmentfault.com/stephenlee/1190000000489202
  为了兼容ASCII，大部分使用GB2312的程序都采用EUC存储方法。
  要明确 UTF-8（8-bit Unicode Transformation Format）是在统一码（Unicode）基础上细化并优化后的
  一种长度可变的字符编码方式，它是实现 Unicode 的方式之一，除了 UTF-8，还有UTF-16，UTF-32 等都可以实现 Unicode，
  但是 UTF-8 相对而言是用的最为广泛的。
  UTF-8 可以使用1到4个字节来，它通过自身的规则能够灵活地变化长度来存储 Unicode 字符

  http://weibo.com/fav?leftnav=1&wvr=5
  
* 加密算法
** RSA 原理
   http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html
* 技能表
  知道创宇研发技能表:http://blog.knownsec.com/Knownsec_RD_Checklist/v2.2.html
