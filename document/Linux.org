* 基础
** stdout/stderr
   stdout和stderr 是不同的设备描述符, stdout是块设备, stderr则不是. 对于块设备,
   只有当如下情况发生时才会被输出: 1: 遇到回车, 2: 缓冲区满, 3:flush被调用.
   例子:
   #inlcude <stdio.h>
   #inlcude <unistd.h>
   int main() {
       while(1) {
           fprintf(stdout, "hello-std-out ");
           fprintf(stderr, "hello-std-err ");
           sleep(1);
       }
       return 0;
   }
** ELF file format(C 学习笔记.pdf P76)
   excutable and linking format是ELF的全称。
   可以从文件和执行两个角度审视ELF结构，/usr/include/elf.h
   和windows COFF格式类似，ELF也有一个特定的文件头，包括一个特定的标志串（magic）

   文件头中描述了ELF文件版本，目标技巧型号，程序入口地址等，其后是可选的程序头表和
   多个段。ELF使用段表存储各个段的相关信息，包括名称，起始位置，长度，权限属性等。
   ELF中还有符号表，字符串表，段，函数等名称。
   section主要是面向目标文件连接器，而segment则是面向执行加载器，后者描述的是内存
   布局结构。
   
   通过查看/usr/include/elf.h文件(Elf32_Ehdr)，可以看出elf header的总长度是52字节。
   因此可以用如下方法查看：
   xxd -g 1 -l 0x34 hello：查看hello的header的52个字节内容
   可以借助readelf工具来查看详细信息：
   readelf -h hello
   头信息中，通常关注的是entry point address，start of section headers
   objdump -dS hello | less 查看Section段的内容
   注意：entry point address指向<_start>而非main(), 在看看段表信息
   readelf -S hello
*** program header
    程序头表告诉系统如何建立一个进程映像
    /usr/include/elf.h(Elf32_Phdr)定义了program header，
    ELF 头信息中已经给出了program的相关数据，起始位置52，数量8，每个头信息长度32字节
    总长度256字节。
    xxd -g 1 -s 0x34 -l 0x100 hello
    
    从程序数据表中，可以从执行角度来看操作系统如何映射ELF文件数据，如何确定各段加载
    偏移量，内存虚拟地址以及内存属性，对齐方式等信息。
    readelf -l hello

    elf.h中的Elf32_Shdr对section header进行了定义，每条header记录是40字节。
* GCC
** gcc 的基本命令
   gcc -E filename -o filename.i // 输出预处理到文件
   gcc -C -E filename -o filename.i // 保留文件头注释
   -Dname定义宏，源文件中不能定义该宏，-Uname取消GCC设置中定义的宏。
   -lpath：设置头文件的搜索路径
   gcc -g -I./lib -I/usr/local/include/cbase filename
   gcc -M -I./lib filename // 查看依赖文件
   gcc -MM -I./lib filename // 忽略标准库
*** 汇编
    gcc -S filename // 将源码汇编成汇编语言
    使用 -fverbose-asm参数可以获取变量注释，-masm=intel可以指定汇编格式为intel
*** 链接
    gcc -c filename // 参数-c仅生成目标文件

    参数-l链接其他库，如：-lpthread链接libpthread.so， 或指定-static参数进行静态
    链接，还可以指定链接库完整路径。
    gcc -g -o test main.c ./libmy.so ./libtest.a
    另外一种做法是用-L指定搜索路径。

    ldd filename //可以查看可执行文件链接了哪些库
*** 动态库
    使用-fPIC -shared参数生成动态库
    gcc -fPIC -c -O2 mylib.c

    gcc -shared -o libmy.so mylib.o

    nm libmy.so // 查看动态库内容
    静态库则需要借助ar工具将多个目标文件打包
    gcc -c mylib.c
    ar rs libmy.a mylib.o
*** 调试
    gcc -pg filename
    参数pg会在程序中添加性能分析函数，用于统计程序中最耗费时间的函数，程序执行后
    统计信息保存在gmon.out文件中，可以用gprof命令查看结果。
* Linux 内置的一些命令
** addr2line
   将程序地址（VA）转换为源代码文件名和行号
   参数：
   f：显示函数名
   s：仅显示文件名，不包括路径
   p：以pretty-print方式显示
   e：文件名
   addr2line -pfe test 8028783
** ar
   创建，修改，提取静态库文件
   参数：
   s：创建或更新静态库索引，相当于ranlib
   r：替换库文件中的老旧目标文件
   c：删除已有文件，创建新静态库
   t：显示包内容
   x：展开包成员
   ar rs libfunc.a func.o
** ldd
   通过模拟运行，查看可执行文件动态库加载。通常用于查看动态库加载失败信息
   参数：
   v：显示详细信息
** nm
   查看目标文件符号表中定义的符号
   参数：
   l：显示文件名和行号
   n：按地址排序
** objcopy/objdump
   objcopy，把一种目标文件中的内容复制到另一种类型的目标文件中。
   objdump，显示目标文件信息，通常用于反汇编
   参数：
   a：显示静态库信息，g：显示调试信息，x：显示头部信息，d：反汇编，
   l：反汇编时输出文件名和行号，M：反汇编参数，比如指定intel或att指令格式
   S：反汇编时输出C源代码
** readelf
   用于显示elf文件详细信息
   参数：
   a：全部信息，l：program段，S：section 头
   h：ELF头，x：以2进制显示段内容，p：以字符串显示段内容
** size/string
   size：列出目标文件段和总体大小 A：更详细信息
   strings：显示目标文件中的所有可打印字符串
** strip
   删除目标文件符号
   参数：
   s：删除全部符号， d：仅删除调试符号
** manpages
   查看标准函数库手册
   man 3 <function>
   man -k <function> 搜索相关的信息
   man -wa printf 查看函数所在的手册文件
** od命令
   od -tx1 -tc -Ax filename：-tx1表示将文件中的字节以16进制列出来，每组一个字节
   -tc表示将文件中的ASCII码以字符形式列出来。-Ax：以16进制显示文件中的地址
* Grub2引导LinuxISO进行安装及救援
  http://os.51cto.com/art/201408/448008.htm
** debian 的使用方法
*** 系统安装方式的引导
    首先下载debina的iso，之后在下载initrd.gz、vmlinuz，或者是将iso文件中的这两个文件解压出来。
    启动系统进入grub2模式，并输入如下命令：
    set root=(hd0,2)
    linux /debian_amd64/vmlinuz #vmlinuz的路径
    initrd /debian_amd64/initrd.gz #initrd的路径
    boot
    解释： root=(hd0,2)指定了系统当前的活动分区为第一块硬盘的第二分区。
*** 系统救援模式的引导
    set root=(hd0,2)  
    linux /debian_amd64/vmlinuz linux rescue/enable=true 
    initrd /debian_amd64/initrd.gz  
    boot rescue/enable=true 
    系统救援模式的启动主要是在GRUB2中需要加入参数rescue/enable=true,这样系统启动时将进入紧急救援模式
** centos7的使用方法
*** 系统安装方式引导
    系统启动直接进入GRUB2模式，在GRUB2命令中输入如下命令
    set root=(hd0,2)  
    loopbadk loop /CentOS7/CentOS7.iso  
    linux (loop)/isolinux/vmlinuz linux repo=hd:/dev/sdg2:/CentOS7  
    initrd (loop)/isolinux/initrd.gz  
    boot 
    其中repo=hd:/dev/sdg2:/CentOS7参数中hd代表使用硬盘安装，/dev/sdg2代表ISO镜像所在分区，/CentOS7代表ISO镜像所在目录。
    “:”应该是参数格式要求的分割符，请用户按照自己ISO所在目录和分区进行修改。关于分区问题需要说明下，
    /CentOS7安装程序启动后会将安装在计算机上的硬盘设置成为/dev/sda
*** 系统救援模式的引导
    set root=(hd0,2)  
    loopbadk loop /CentOS7/CentOS7.iso  
    linux (loop)/isolinux/vmlinuz linux rescue repo=hd:/dev/sdg2:/CentOS7  
    initrd (loop)/isolinux/initrd.gz  
    boot linux rescue
