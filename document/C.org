* 容易忘记的知识点
** sizeof
   sizeof返回值是 unsigned 的, 在做比较的时候需要小心
   sizeof是一个操作符, 不是函数, 因此在计算类似 sizeof(i++) 时, 并不会将i的加一, 因为求其i++的类型size,
   这是一件可以在程序运行前(编译时)完成的事情, 即sizeof(i++)直接被4给取代了.
** 命名
   变量名, 函数名等不能含有 -(减号) 等特殊字符
** continue
   例如代码:
   #include <stdio.h>
   enum {false, true};

   int main() {
       int i = 1;
       do {
           printf("%d\n", i);
           ++i;
           if (i < 15) 
               continue
       }while(false);
       return 0;
   }
   结果输出1: 因为continue的含义是不执行循环体之后的语句, 而直接到循环点.
** 宏
   #include <stdio.h>
   #define f(a,b) a##b
   #define g(a)   #a
   #define h(a) g(a)
 
   int main()
   {
       printf("%s\n", h(f(1,2)));
       printf("%s\n", g(f(1,2)));
       // printf("%s\n", f(g(i), h(2))); // mac 10.9 Apple LLVM version5.0, 预处理器无法展开宏
       return 0;
   }
   输出结果: 12, f(1,2)
   解释: http://blog.csdn.net/kingkai620/article/details/5905606
   # 将右边的参数作整体的字符串替换
   对于# 的参数, 即便是另一个宏, 也不展开, 任然作为字符串字面信息输出.
   对于h(f(1, 2)), 由于h(a)是非# 或## 的普通宏, 需要先宏展开其参数
   ## 将左右两边的参数做整体的字符串拼接替换.
   对于##, 即便是另一个宏也不会展开宏, 经过## 替换后的内容必须能够作为一个合法的变量
** switch
   switch语句中, 如果default 拼写不正确时, 会将其当作一个标号来处理.
** 函数的定义
   int foobar1(void);
   int foobar2();
   在C语言中上述两个函数的函数原型是不一样的. foobar1 调用时不能有参数, foobar2调用时可以有多个参数
** 逗号表达式
   在初始化变量时, 如果不加括号, 则逗号不会作为逗号表达式来处理的, 例子:
   int a = 1, 2; // 不是逗号表达式, 可以改为 int a = (1, 2)
** printf
   printf的返回值是输出字符的个数
   当printf由于类型不匹配时, 会将float转换为double类型
** 浮点数在计算机中得表示
   float类型的浮点数: 占4个字节, 1位符号位(s), 8位指数(e),23位尾数(m,共32位)
   12.5f在内存中存储是: 0×41480000
   double类型的浮点数: 占8个字节, 1位符号位(s), 11位指数(e), 52位尾数(m,共64位)
   12.5d在内存中存储是: 0×4029000000000000
   具体的浮点数存储方式可以参看http://www.ruanyifeng.com/blog/2010/06/ieee_floating-point_representation.html
   具体计算方法如下:
   计算机中得浮点数存储标准是: 根据国际标准IEEE 754, 
   C99 中提供了对复数的支持,  用两个相同类型的浮点数分别表示复数的实部和虚部
** 数据类型(char/int/...) 
   由于在不同系统上 char 可能代表有符号或无无符号 8 位整数,因此建议使用
   unsigned char / signed char 来表示示具体的类型
   在stdint.h中定义一些更加明确的整数类型, 以及各种整数类型的大小限制
   在stdint.h中同样给出了指针的定义
   stdint.h中定义了一些辅助宏
   #if __WORDSIZE == 64
   # define __INT64_C(c) c ## L
   # define __UINT64_C(c) c ## UL
   #else
   # define __INT64_C(c) c ## LL
   # define __UINT64_C(c) c ## ULL
   #endif
   字符常量默认是int，除非用前置L表示wchar_t宽字符类型
   在Linux中，默认字符集是UTF-8，可以用wctomb等函数进行转换，wchar_t默认是4字节，
   足以容纳所有UCS-4 unicode字符。
   LC_CTYPE的定义在locale.h中
   wchar_t字符串以一个4个字节的NULL结束
   size_t:在 32 位和 64 位平台长度不同
** 运算符
   C99 新增的内容，可以用直接用如下语法声明
   (类型 名称){初始化列表}
   如果是静态或全局变量，则初始化列表必须是编译期常量
** 枚举
   省略枚举小小标签用用来代替宏定义常量
   enum { BLACK = 1, RED, GREEN = 1, YELLOW };
** 语句块
   语句块代表了一个作用域，在语句块内声明的自动变量超出范围后立即被释放。
   最后一个表达式的值被当作语句块的返回值。
** GCC的switch扩展
     char c = 'C';
     switch(c) {
     case 'a' ... 'z':
       printf("a..z\n");
       break;
     case 'A' ... 'Z':
       printf("A..Z\n");
       break;
     }
** longjmp
   setjmp 将当前位置的相关信息 (堆栈帧、寄存器等) 保存到 jmp_buf 结构中,
   并返回 0。当后续代码执行行 longjmp 跳转时,需要提供一一个状态码。
   代码执行行绪将返回 setjmp 处,并返回 longjmp所提供的状态码
** 函数
   gcc支持嵌套函数扩展
   typedef void(*func_t)();

   func_t test() {
     void func1() {
       printf("%s\n", __func__);
     }
     return func1   ;
   }
   内层函数可以 "读写" 外层函数的参数和变量,外层变量必须在内嵌函数之前定义。
   C函数默认采用cdecl调用约定，参数从右往左入栈，且由调用者负责参数入栈和清理。

   当数组作为函数的参数时，总是被隐式的转换为指向数组第一元素的指针，即再也无法用
   sizeof获取数组的实际长度了。
** 指针
   void* 被称为万能指针，可以代表任何对象的地址,但没有该对象的类型。
   也就是说必须转型后才能进行行对象操作。
   void* 指针可以与其他任何类型指针进行行隐式转换
*** 指针常量
    指“类型为指针的常量”，初始化后不能被修改，即固定指向某个内存地址，无法修改指针
    自身的值，但是可以修改指针所指目标的内容。
*** 常量指针
    指“指向常量数据的指针”，指针目标被当作常量处理，不能通过指针做赋值处理。指针自身
    并非常量，可以指向其他位置，但依然不能做赋值操作。
*** 指针数组
    指针数组通常用来处理交错数组，最常见的就是字符串数组了
    int *ps[]; // 指针数组
*** 数组指针
    int x[] = {1, 2, 3};
    int *p1 = x; // 指向整数的指针
    int (*p2)[] = &x; // 指向数组的指针
    p1的类型是int*，p2指向一个“数组类型”的指针。
*** 函数指针
    typedef void (*inc_t)(int*);
    
** 结构
   结构类型无法将自己作为成员类型，但是可以包含“指向自己类型”的指针成员
   定义不完整结构类型，只能使用小标签，像下面这样的typedef类型是不可以的
   typedef struct {
     list_node* prev;
   } list_noed;
   必须使用如下的方式：
   typedef struct node_t {
     struct node_t *prev;
   }
   小标签可以和typedef定义的类型相同
   利用stddef.h中的offset宏可以获取结构成员的偏移量
   弹性结构体成员：就是在结构体尾部声明一个未指定长度的数组，用sizeof时，该数组未
   计入结果
** 位字段
   可以将结构和联合的多个成员“压缩存储”在一个字段中，以节约内存。
   不能对位字段成员使用offsetof
** 预处理
   预处理指令以#开始，其前可以有space或tab，通常独立一行。
   __VA_ARGS__标识用来表示一组可选性自变量。
   typeof是GCC扩展的可以获取参数的类型
   其他一些常用的宏：
   #error “message”：定义一个编译器错误信息
   __DATE__: 编译日期字符串
   __TIME__: 编译时间字符串
   __FILE__: 当前源码文件名
   __LINE__: 当前源码行号
   __func__: 当前函数名称
** 调试
   习惯使用assert宏进行函数参数和执行条件判断，该宏位于#include <assert.h>中
   如果在编译release版本时，加上-DNDEBUG参数就可以取消assert
<<<<<<< HEAD
** 副作用
   改变计算机存储单元里的数据或者做输入输出操作
=======
** 基本知识点
   当b！=0时， a = (a/b)*b + a % b， %运算符的结果总是与被除数同号
   递归和循环式等价的，用循环能做的事情使用递归也能做，有些编译器会对尾递归做优化，这样尾递归就不会存在栈溢出的问题
   编译的过程分为词法解析和语法解析，在词法阶段编译器总是从前向后找到最长的合法token
   如果用于初始化的字符串字面值比数组刚好长出一个Null字符的长度，比如：
   char str[14] = "Hello, world.\n";
   则数组str不包含Null字符，并且编译器不会给出警告
   注意： &, | , ^运算符都是要做usual arithmetic conversion的（其中一步integer promotion），所以
   在C语言中其实不存在8位整数的位运算，操作数在做位运算之前至少都被提升至int型了。
   建议只对无符号数做移位运算，因为有符号数的移位运算比较复杂。
* MakeFile
  参见 referencedata/makefile.pdf
* 代码优化
** 角度的计算
   最适合定点运算的角度表示方法，即不是360度等分圆的角度制，
   也不是2 pi为一个圆周的弧度制，而是更适合计算机来处理的，
   以64为直角的表示方法。因为让256为一个圆周角的话，更容易简化角度运算。
* GNU C, ANSI C, 标准C, 标准C++的区别与联系
  http://www.cnblogs.com/balaamwe/archive/2012/01/07/2316076.html
  
  ASNI C和标准C是一个概念。
* gcc的特性
  gcc的扩展特性允许嵌套定义函数，但是C99标准是不允许嵌套定义函数的
* SDS: 一个简易动态字符串库
  redis的源码中使用到了该sds的功能
  http://blog.jobbole.com/68119/
  扩展阅读： C语言结构体里的成员数组和指针
  http://coolshell.cn/articles/11377.html
* C标准的规定
** 术语implementation-defined, unspecified和undefined
   implementation-defined：C标准没有明确规定，但是要求编译器必须对此做出明确的规定，并
   写在编译器的文档中

   unspecified：C标准没有明确规定按哪种方式处理，编译器可以自己决定，并且也不必写在编译器
   文档中，这样即便是用同一个编译器的不同版本来编译，可能得到的结果也不同。

   undefined：C标准没规定怎么处理，编译器也可能没有规定，甚至也没做出错处理，有很多
   undefined的情况编译器是检查不出来的，最终会导致运行时错误。
